{"name":"JBSE","tagline":"A symbolic Java virtual machine for program analysis, verification and test generation.","body":"### Welcome to JBSE.\r\nJBSE is the Java Bytecode Symbolic Executor. Basically, it is a special-purpose Java Virtual Machine written in Java.\r\n\r\n### What's for?\r\nJBSE is meant to be used for analyzing your Java code and assess whether it is OK or not. This makes it similar in aim to tools as Checkstyle, PMD or Findbugs, but the analogy ends here. While the above mentioned tools work by scanning the source code in search for errors, JBSE works by simulating the execution of compiled classes (that's why it is a Java Virtual Machine) and analyzing all the conditions that may lead to the coverage of bytecode instructions. In practice, JBSE allows you to specify your custom verification properties by means of assumptions and assertions, and determines whether some program inputs exists that, while satisfying all the assumptions, make fail at least one assertion. In this regard JBSE is a hybrid, static/dynamic analysis tool more similar in spirit, implementation and mode of use to tools like Java Pathfinder, Syreum/Kiasan and JNuke.\r\n\r\n### What are its distinctive features?\r\nSpecifying good verification properties is not always an easy task, especially when your code is object-oriented. JBSE offers a quite comprehensive set of techniques that help you in the task, that none of the tools we are currently aware of offers. \r\n\r\n### What are its limitations?\r\nDetermining whether a control-flow path in the program can be covered by some inputs is much harder than scanning the code for error patterns. JBSE produces path condititions, that is, formulas on input variables whose solutions, if they exist, are the input values that cover a program path, and offloads the search of their solution to an external tool. Currently JBSE can interact with Sicstus, a Prolog system with CLP abilities, and with the SMT solvers Z3 and CVC3.\r\n\r\n### Authors and Contributors\r\nThe contributions to JBSE extend over a very long period, and we lost track to the exact authors of all of them. The current maintainer of JBSE is Pietro Braione (@pietrobraione), with contributions by Giovanni Denaro. Marco Gaboardi wrote the initial implementation. Diego Piazza contributed to develop the Z3 interface.\r\n\r\n### Support or Contact\r\nFor any issue contact Pietro Braione.","google":"UA-33854666-2","note":"Don't delete this file! It's used internally to help with page regeneration."}